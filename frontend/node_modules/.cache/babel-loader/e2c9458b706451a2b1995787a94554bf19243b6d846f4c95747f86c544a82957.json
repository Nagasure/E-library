{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost/e-library-web-app/backend/api';\nexport const bookService = {\n  async getBooks() {\n    const response = await fetch(`${API_URL}/books.php`);\n    return await response.json();\n  },\n  addBook: async bookData => {\n    try {\n      const response = await axios.post(`${API_URL}/addBook.php`, {\n        title: bookData.title,\n        author: bookData.author,\n        description: bookData.description,\n        pdf_url: bookData.pdfUrl // Changed to match database field name\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.data) {\n        throw new Error('No response from server');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Add book error:', error.response || error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Server error');\n    }\n  },\n  deleteBook: async bookId => {\n    try {\n      const response = await axios.delete(`${API_URL}/deleteBook.php`, {\n        data: {\n          id: bookId\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.data) {\n        throw new Error('No response from server');\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Delete book error:', error.response || error);\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to delete book');\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","bookService","getBooks","response","fetch","json","addBook","bookData","post","title","author","description","pdf_url","pdfUrl","headers","data","Error","error","_error$response","_error$response$data","console","message","deleteBook","bookId","delete","id","_error$response2","_error$response2$data"],"sources":["C:/xampp/htdocs/e-library-web-app/frontend/src/services/bookService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost/e-library-web-app/backend/api';\r\n\r\nexport const bookService = {\r\n    async getBooks() {\r\n        const response = await fetch(`${API_URL}/books.php`);\r\n        return await response.json();\r\n    },\r\n    \r\n    addBook: async (bookData) => {\r\n        try {\r\n            const response = await axios.post(`${API_URL}/addBook.php`, {\r\n                title: bookData.title,\r\n                author: bookData.author,\r\n                description: bookData.description,\r\n                pdf_url: bookData.pdfUrl  // Changed to match database field name\r\n            }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!response.data) {\r\n                throw new Error('No response from server');\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Add book error:', error.response || error);\r\n            throw new Error(error.response?.data?.message || 'Server error');\r\n        }\r\n    },\r\n    \r\n    deleteBook: async (bookId) => {\r\n        try {\r\n            const response = await axios.delete(`${API_URL}/deleteBook.php`, {\r\n                data: { id: bookId },\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            \r\n            if (!response.data) {\r\n                throw new Error('No response from server');\r\n            }\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Delete book error:', error.response || error);\r\n            throw new Error(error.response?.data?.message || 'Failed to delete book');\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gDAAgD;AAEhE,OAAO,MAAMC,WAAW,GAAG;EACvB,MAAMC,QAAQA,CAAA,EAAG;IACb,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,YAAY,CAAC;IACpD,OAAO,MAAMG,QAAQ,CAACE,IAAI,CAAC,CAAC;EAChC,CAAC;EAEDC,OAAO,EAAE,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACA,MAAMJ,QAAQ,GAAG,MAAMJ,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,cAAc,EAAE;QACxDS,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBC,MAAM,EAAEH,QAAQ,CAACG,MAAM;QACvBC,WAAW,EAAEJ,QAAQ,CAACI,WAAW;QACjCC,OAAO,EAAEL,QAAQ,CAACM,MAAM,CAAE;MAC9B,CAAC,EAAE;QACCC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC9C;MAEA,OAAOb,QAAQ,CAACY,IAAI;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACZC,OAAO,CAACH,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACd,QAAQ,IAAIc,KAAK,CAAC;MACzD,MAAM,IAAID,KAAK,CAAC,EAAAE,eAAA,GAAAD,KAAK,CAACd,QAAQ,cAAAe,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBH,IAAI,cAAAI,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,cAAc,CAAC;IACpE;EACJ,CAAC;EAEDC,UAAU,EAAE,MAAOC,MAAM,IAAK;IAC1B,IAAI;MACA,MAAMpB,QAAQ,GAAG,MAAMJ,KAAK,CAACyB,MAAM,CAAC,GAAGxB,OAAO,iBAAiB,EAAE;QAC7De,IAAI,EAAE;UAAEU,EAAE,EAAEF;QAAO,CAAC;QACpBT,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACX,QAAQ,CAACY,IAAI,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC9C;MAEA,OAAOb,QAAQ,CAACY,IAAI;IACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;MAAA,IAAAS,gBAAA,EAAAC,qBAAA;MACZP,OAAO,CAACH,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACd,QAAQ,IAAIc,KAAK,CAAC;MAC5D,MAAM,IAAID,KAAK,CAAC,EAAAU,gBAAA,GAAAT,KAAK,CAACd,QAAQ,cAAAuB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBX,IAAI,cAAAY,qBAAA,uBAApBA,qBAAA,CAAsBN,OAAO,KAAI,uBAAuB,CAAC;IAC7E;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}